=====[MONGODB QUERIES]=======================================================

- db => SHOWS THE CURRENT DATABASE
- show dbs => SHOWS ALL DATABASES

- TO DISPLAY A MONGODB DATABASE, AT LEAST ONE 
DOCUMENT NEEDS TO BE INSERTED INTO IT

- IF NO DATABASE HAS BEEN CREATED, THEN 
COLLECTIONS WILL BE STORED IN THE DEFAULT 
"TEST" DATABASE

use db_name => SWITCHES INTO THE DB

db.dropDatabase() => DELETES THE DATABASE


=====[MONGODB COLLECTIONS]=======================================================================

=> show collections

=> db.createCollection("users")

=> use "users"


=====[CRUD OPERATIONS]============================================================================

===[CREATING DOCUMENTS]===========================================================================

=> db.users.insertOne({name: "John", age: 30})
=> db.users.insertMany({name: "John", age: 30}, {name: "Jane", age: 25})


===[READING DOCUMENTS]===============================================================================

=> findOne()
=> db.users.find({filter}).pretty()

[EXAMPLES]:

// FINDING ALL POSTS WHERE SWIMMING IS THE ONLY TAG IN THE TAGS ARRAY
db.posts.find({tags: ["swimming"]}, {}).pretty()

// RETURNING THE AUTHORS OF ALL POSTS THAT HAVE SWIMMING AS A TAG 
db.posts.find({tags: "swimming"}, {author: 1, _id: 0}).pretty()

// PROJECTION => ONLY RETURNING THE NECESSARY FIELDS
// 1 => TRUE, 0 => FALSE

// RETURNING THE NUMBER OF DOCUMENTS IN A COLLECTION
db.posts.find().count()


===[UPDATE]========================================================

=> updateOne(filter, data, options)
=> updateMany(filter, data, options)
=> replaceOne(filter, data, options)

[EXAMPLES]:

db.posts.updateOne({_id: "_____"}, {$set: {"address.city": "LA"}})


===[DELETE]========================================================

=> deleteOne(filter, options)
=> deleteMany(filter, options)


[EXAMPLES]:

db.users.deleteOne({_id: "_____"})
db.users.deleteMany({relationshipStatus: "unknown"})




